# Generated by Django 4.2.7 on 2025-09-10 17:34

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Patient",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        help_text="Patient's first name",
                        max_length=100,
                        validators=[django.core.validators.MinLengthValidator(2)],
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        help_text="Patient's last name",
                        max_length=100,
                        validators=[django.core.validators.MinLengthValidator(2)],
                    ),
                ),
                (
                    "middle_name",
                    models.CharField(
                        blank=True,
                        help_text="Patient's middle name (optional)",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(help_text="Patient's date of birth"),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            ("MALE", "Male"),
                            ("FEMALE", "Female"),
                            ("OTHER", "Other"),
                            ("PREFER_NOT_TO_SAY", "Prefer not to say"),
                        ],
                        help_text="Patient's gender",
                        max_length=20,
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        help_text="Primary phone number",
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        help_text="Email address",
                        max_length=254,
                        null=True,
                        validators=[django.core.validators.EmailValidator()],
                    ),
                ),
                (
                    "address",
                    models.TextField(blank=True, help_text="Full address", null=True),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True, help_text="City", max_length=100, null=True
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        blank=True,
                        help_text="State/Province",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "postal_code",
                    models.CharField(
                        blank=True,
                        help_text="Postal/ZIP code",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True,
                        default="United States",
                        help_text="Country",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "blood_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A_POSITIVE", "A+"),
                            ("A_NEGATIVE", "A-"),
                            ("B_POSITIVE", "B+"),
                            ("B_NEGATIVE", "B-"),
                            ("AB_POSITIVE", "AB+"),
                            ("AB_NEGATIVE", "AB-"),
                            ("O_POSITIVE", "O+"),
                            ("O_NEGATIVE", "O-"),
                            ("UNKNOWN", "Unknown"),
                        ],
                        help_text="Blood type",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "allergies",
                    models.TextField(
                        blank=True, help_text="Known allergies", null=True
                    ),
                ),
                (
                    "medications",
                    models.TextField(
                        blank=True, help_text="Current medications", null=True
                    ),
                ),
                (
                    "medical_history",
                    models.TextField(
                        blank=True,
                        help_text="Medical history and conditions",
                        null=True,
                    ),
                ),
                (
                    "emergency_contact_name",
                    models.CharField(
                        help_text="Emergency contact person name", max_length=100
                    ),
                ),
                (
                    "emergency_contact_phone",
                    models.CharField(
                        help_text="Emergency contact phone number",
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "emergency_contact_relationship",
                    models.CharField(
                        blank=True,
                        help_text="Relationship to patient",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "insurance_provider",
                    models.CharField(
                        blank=True,
                        help_text="Insurance provider name",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "insurance_number",
                    models.CharField(
                        blank=True,
                        help_text="Insurance policy number",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("INACTIVE", "Inactive"),
                            ("DISCHARGED", "Discharged"),
                            ("DECEASED", "Deceased"),
                        ],
                        default="ACTIVE",
                        help_text="Patient status",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("MEDIUM", "Medium"),
                            ("HIGH", "High"),
                            ("CRITICAL", "Critical"),
                        ],
                        default="MEDIUM",
                        help_text="Patient priority level",
                        max_length=20,
                    ),
                ),
                (
                    "social_security_number",
                    models.CharField(
                        blank=True,
                        help_text="Social Security Number (encrypted)",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about the patient",
                        null=True,
                    ),
                ),
                (
                    "last_visit",
                    models.DateTimeField(
                        blank=True, help_text="Date of last visit", null=True
                    ),
                ),
                (
                    "next_appointment",
                    models.DateTimeField(
                        blank=True, help_text="Next scheduled appointment", null=True
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, help_text="Soft delete flag"),
                ),
                (
                    "doctor",
                    models.ForeignKey(
                        help_text="Doctor responsible for this patient",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="patients",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "patient_management_patient",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PatientNote",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                ("is_private", models.BooleanField(default=False)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_notes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="patient_notes",
                        to="patient_management.patient",
                    ),
                ),
            ],
            options={
                "db_table": "patient_management_note",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PatientAuditLog",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("action", models.CharField(max_length=50)),
                ("changes", models.JSONField(blank=True, null=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True, null=True)),
                (
                    "patient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="audit_logs",
                        to="patient_management.patient",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "patient_management_audit_log",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="patient",
            index=models.Index(
                fields=["doctor", "status"], name="patient_man_doctor__3dd963_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="patient",
            index=models.Index(
                fields=["doctor", "priority"], name="patient_man_doctor__7d50d5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="patient",
            index=models.Index(
                fields=["last_name", "first_name"],
                name="patient_man_last_na_fcee93_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="patient",
            index=models.Index(
                fields=["created_at"], name="patient_man_created_b8dbc7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="patient",
            index=models.Index(
                fields=["date_of_birth"], name="patient_man_date_of_ea3328_idx"
            ),
        ),
    ]
