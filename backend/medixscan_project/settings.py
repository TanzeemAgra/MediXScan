"""
Django settings for medixscan_project project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialize environment variables
env = environ.Env(
    DEBUG=(bool, False)
)

# Take environment variables from .env file
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', default='django-insecure-your-secret-key-here')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG', default=True)

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1', '0.0.0.0', 'medixscan-production.up.railway.app'])

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',  # Required for Token authentication
    'corsheaders',
    'accounts',
    'reports',
    'api',
    'patient_management',  # Added patient management app
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'medixscan_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'medixscan_project.wsgi.application'

# Database - Using Soft-Coded Configuration Management
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Import soft-coded configuration
import sys
sys.path.append(str(BASE_DIR))

try:
    from config_management import (
        DATABASE_CONFIG, SECURITY_CONFIG, CORS_CONFIG, 
        EMAIL_CONFIG, config
    )
    
    # Use Railway-aware database configuration
    DATABASES = {'default': DATABASE_CONFIG}
    
    # Update security settings
    SECRET_KEY = SECURITY_CONFIG['SECRET_KEY']
    DEBUG = SECURITY_CONFIG['DEBUG']
    ALLOWED_HOSTS = SECURITY_CONFIG['ALLOWED_HOSTS']
    
    # Production security settings
    if not DEBUG:
        SECURE_SSL_REDIRECT = SECURITY_CONFIG['SECURE_SSL_REDIRECT']
        SECURE_HSTS_SECONDS = SECURITY_CONFIG['SECURE_HSTS_SECONDS']
        SECURE_HSTS_INCLUDE_SUBDOMAINS = SECURITY_CONFIG['SECURE_HSTS_INCLUDE_SUBDOMAINS']
        SECURE_HSTS_PRELOAD = SECURITY_CONFIG['SECURE_HSTS_PRELOAD']
        SESSION_COOKIE_SECURE = SECURITY_CONFIG['SESSION_COOKIE_SECURE']
        CSRF_COOKIE_SECURE = SECURITY_CONFIG['CSRF_COOKIE_SECURE']
    
except ImportError:
    # Fallback configuration for Railway deployment
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('PGDATABASE', env('DB_NAME', default='medixscan_db')),
            'USER': os.getenv('PGUSER', env('DB_USER', default='postgres')),
            'PASSWORD': os.getenv('PGPASSWORD', env('DB_PASSWORD', default='password')),
            'HOST': os.getenv('PGHOST', env('DB_HOST', default='localhost')),
            'PORT': os.getenv('PGPORT', env('DB_PORT', default='5432')),
            'OPTIONS': {
                'sslmode': 'require' if os.getenv('RAILWAY_ENVIRONMENT') else env('DB_SSLMODE', default='prefer'),
            },
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'accounts.User'

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
}

# CORS settings - Using Soft-Coded Configuration Management
try:
    # Use advanced CORS configuration
    CORS_ALLOWED_ORIGINS = CORS_CONFIG['CORS_ALLOWED_ORIGINS']
    CORS_ALLOW_CREDENTIALS = CORS_CONFIG['CORS_ALLOW_CREDENTIALS']
    CORS_ALLOW_ALL_ORIGINS = CORS_CONFIG.get('CORS_ALLOW_ALL_ORIGINS', False)
except (NameError, KeyError):
    # Fallback CORS configuration
    CORS_ALLOW_ALL_ORIGINS = DEBUG  # Only in development
    CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=[
        "http://localhost:3000",
        "http://localhost:5173",
        "http://localhost:5175",
        "http://localhost:5176",
        "http://localhost:5177",
        "http://127.0.0.1:3000",
        "http://127.0.0.1:5173",
        "http://127.0.0.1:5175",
        "http://127.0.0.1:5176",
        "http://127.0.0.1:5177",
    ])
    CORS_ALLOW_CREDENTIALS = True

# Soft-coded CORS headers configuration
CORS_ALLOW_HEADERS = env.list('CORS_ALLOW_HEADERS', default=[
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-client-version',  # Custom header for API versioning
    'x-api-key',
    'cache-control',
])

# Soft-coded CORS methods configuration
CORS_ALLOWED_METHODS = env.list('CORS_ALLOWED_METHODS', default=[
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
])

# Additional CORS settings for radiology application
CORS_PREFLIGHT_MAX_AGE = env.int('CORS_PREFLIGHT_MAX_AGE', default=86400)  # 24 hours

# OpenAI Configuration
OPENAI_API_KEY = env('OPENAI_API_KEY', default='')

# AWS Configuration
AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID', default='')
AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY', default='')
AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME', default='')
AWS_S3_REGION_NAME = env('AWS_S3_REGION_NAME', default='us-east-1')

# RAG Configuration - Soft Coding Approach
RAG_SOURCES = {
    'radiologyassistant': {
        'base_url': env('RAG_RADIOLOGY_BASE_URL', default='https://radiologyassistant.nl'),
        'enabled': env('RAG_RADIOLOGY_ENABLED', default=True, cast=bool),
        'max_pages': env('RAG_MAX_PAGES', default=50, cast=int),
        'delay': env('RAG_REQUEST_DELAY', default=1.0, cast=float),
        'timeout': env('RAG_REQUEST_TIMEOUT', default=30, cast=int),
        'retry_attempts': env('RAG_RETRY_ATTEMPTS', default=3, cast=int),
        'headers': {
            'User-Agent': env('RAG_USER_AGENT', default='Medical Education Bot 1.0'),
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
        },
        'selectors': {
            'content': env('RAG_CONTENT_SELECTOR', default='.content, .main-content, article, .post-content'),
            'title': env('RAG_TITLE_SELECTOR', default='h1, h2, .title'),
            'medical_terms': env('RAG_MEDICAL_SELECTOR', default='p, li, .description')
        }
    }
}

RAG_MEDICAL_TERMS = {
    'anatomical_patterns': [
        r'\b(?:chest|lung|heart|brain|liver|kidney|spine|pelvis|abdomen|thorax)\b',
        r'\b(?:vertebra|rib|sternum|clavicle|scapula|humerus|radius|ulna)\b',
        r'\b(?:femur|tibia|fibula|patella|ankle|foot|hand|wrist|elbow|shoulder)\b',
        r'\b(?:cranium|skull|mandible|maxilla|temporal|parietal|frontal|occipital)\b',
        r'\b(?:cervical|thoracic|lumbar|sacral|coccyx|intervertebral|disc)\b'
    ],
    'pathology_patterns': [
        r'\b(?:fracture|pneumonia|edema|tumor|lesion|mass|nodule|opacity)\b',
        r'\b(?:atelectasis|pneumothorax|pleural|effusion|consolidation)\b',
        r'\b(?:stenosis|occlusion|thrombosis|embolism|infarct|ischemia)\b',
        r'\b(?:hemorrhage|hematoma|contusion|laceration|perforation)\b',
        r'\b(?:inflammation|infection|abscess|necrosis|fibrosis)\b'
    ],
    'imaging_patterns': [
        r'\b(?:CT|MRI|ultrasound|x-ray|radiograph|fluoroscopy|mammography)\b',
        r'\b(?:contrast|enhancement|gadolinium|iodine|barium)\b',
        r'\b(?:axial|sagittal|coronal|oblique|lateral|anteroposterior|PA)\b',
        r'\b(?:T1|T2|FLAIR|DWI|perfusion|angiography|venography)\b',
        r'\b(?:PET|SPECT|nuclear|scintigraphy|bone scan)\b'
    ],
    'general_patterns': [
        r'\b(?:normal|abnormal|significant|unremarkable|remarkable)\b',
        r'\b(?:mild|moderate|severe|acute|chronic|subacute)\b',
        r'\b(?:bilateral|unilateral|diffuse|focal|multifocal|widespread)\b',
        r'\b(?:superior|inferior|anterior|posterior|medial|lateral|proximal|distal)\b',
        r'\b(?:symmetrical|asymmetrical|homogeneous|heterogeneous)\b'
    ],
    'min_word_length': env('RAG_MIN_WORD_LENGTH', default=3, cast=int),
    'max_word_length': env('RAG_MAX_WORD_LENGTH', default=50, cast=int),
    'exclude_patterns': [
        r'\b(?:the|and|or|but|in|on|at|to|for|of|with|by)\b',
        r'\b(?:this|that|these|those|here|there|when|where|how|why)\b',
        r'\b(?:will|would|could|should|may|might|can|must)\b'
    ]
}

RAG_CACHE = {
    'vocabulary_timeout': env('RAG_VOCAB_CACHE_TIMEOUT', default=3600, cast=int),  # 1 hour
    'content_timeout': env('RAG_CONTENT_CACHE_TIMEOUT', default=86400, cast=int),  # 24 hours
    'max_cache_size': env('RAG_MAX_CACHE_SIZE', default=1000, cast=int),
    'cache_prefix': env('RAG_CACHE_PREFIX', default='rag_')
}

RAG_ANALYSIS = {
    'openai_model': env('RAG_OPENAI_MODEL', default='gpt-3.5-turbo'),
    'max_tokens': env('RAG_MAX_TOKENS', default=1000, cast=int),
    'temperature': env('RAG_TEMPERATURE', default=0.3, cast=float),
    'confidence_threshold': env('RAG_CONFIDENCE_THRESHOLD', default=0.7, cast=float),
    'max_report_length': env('RAG_MAX_REPORT_LENGTH', default=10000, cast=int),
    'min_report_length': env('RAG_MIN_REPORT_LENGTH', default=50, cast=int)
}

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'django.log',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
}
